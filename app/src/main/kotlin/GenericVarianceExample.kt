package org.example.app

/**
 * KOTLIN GENERICS VARIANCE - IN V√Ä OUT
 * 
 * File n√†y gi·∫£i th√≠ch chi ti·∫øt v·ªÅ variance trong Kotlin generics:
 * - Covariance (out): Cho ph√©p s·ª≠ d·ª•ng ki·ªÉu con thay cho ki·ªÉu cha
 * - Contravariance (in): Cho ph√©p s·ª≠ d·ª•ng ki·ªÉu cha thay cho ki·ªÉu con
 * - Invariance: Kh√¥ng cho ph√©p thay th·∫ø ki·ªÉu
 * 
 * T√°c gi·∫£: Kotlin Learning Guide
 * Ng√†y t·∫°o: 2024
 */

import kotlin.random.Random

/**
 * =============================================================================
 * 1. GI·ªöI THI·ªÜU V·ªÄ VARIANCE
 * =============================================================================
 * 
 * Variance l√† kh√°i ni·ªám m√¥ t·∫£ m·ªëi quan h·ªá gi·ªØa c√°c ki·ªÉu generic khi c√≥
 * m·ªëi quan h·ªá k·∫ø th·ª´a gi·ªØa c√°c type parameter.
 * 
 * C√≥ 3 lo·∫°i variance:
 * - Covariance (out): Producer - ch·ªâ ƒë·ªçc d·ªØ li·ªáu ra
 * - Contravariance (in): Consumer - ch·ªâ nh·∫≠n d·ªØ li·ªáu v√†o  
 * - Invariance: Kh√¥ng c√≥ variance - v·ª´a ƒë·ªçc v·ª´a ghi
 */

// ƒê·ªãnh nghƒ©a hierarchy class ƒë·ªÉ demo
open class Animal(val name: String) {
    open fun makeSound() = "Some sound"
    override fun toString() = "Animal($name)"
}

open class Mammal(name: String) : Animal(name) {
    override fun makeSound() = "Mammal sound"
    override fun toString() = "Mammal($name)"
}

class Dog(name: String) : Mammal(name) {
    override fun makeSound() = "Woof!"
    fun bark() = "Bark bark!"
    override fun toString() = "Dog($name)"
}

class Cat(name: String) : Mammal(name) {
    override fun makeSound() = "Meow!"
    fun purr() = "Purr purr!"
    override fun toString() = "Cat($name)"
}

/**
 * =============================================================================
 * 2. COVARIANCE (OUT) - PRODUCER
 * =============================================================================
 * 
 * Covariance cho ph√©p s·ª≠ d·ª•ng ki·ªÉu con thay cho ki·ªÉu cha.
 * S·ª≠ d·ª•ng t·ª´ kh√≥a 'out' tr∆∞·ªõc type parameter.
 * 
 * Quy t·∫Øc: Ch·ªâ c√≥ th·ªÉ S·∫¢N XU·∫§T (produce/return) d·ªØ li·ªáu, kh√¥ng th·ªÉ TI√äU TH·ª§ (consume/accept)
 * 
 * V√≠ d·ª•: Producer<Dog> c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng nh∆∞ Producer<Animal>
 * v√¨ Dog l√† con c·ªßa Animal, v√† ta ch·ªâ l·∫•y d·ªØ li·ªáu ra t·ª´ Producer.
 */

// Interface covariant - ch·ªâ produce d·ªØ li·ªáu ra
interface Producer<out T> {
    fun produce(): T
    // fun consume(item: T) // ‚ùå KH√îNG ƒë∆∞·ª£c ph√©p - vi ph·∫°m covariance
}

// Implementation c·ª• th·ªÉ
class DogProducer : Producer<Dog> {
    private val dogs = listOf(
        Dog("Buddy"), 
        Dog("Max"), 
        Dog("Charlie")
    )

    override fun produce(): Dog {
        return dogs[Random.nextInt(dogs.size)]
    }
}

class AnimalProducer : Producer<Animal> {
    private val animals = listOf(
        Dog("Rex"),
        Cat("Whiskers"), 
        Animal("Generic Animal")
    )

    override fun produce(): Animal {
        return animals[Random.nextInt(animals.size)]
    }
}

/**
 * =============================================================================
 * 3. CONTRAVARIANCE (IN) - CONSUMER  
 * =============================================================================
 * 
 * Contravariance cho ph√©p s·ª≠ d·ª•ng ki·ªÉu cha thay cho ki·ªÉu con.
 * S·ª≠ d·ª•ng t·ª´ kh√≥a 'in' tr∆∞·ªõc type parameter.
 * 
 * Quy t·∫Øc: Ch·ªâ c√≥ th·ªÉ TI√äU TH·ª§ (consume/accept) d·ªØ li·ªáu, kh√¥ng th·ªÉ S·∫¢N XU·∫§T (produce/return)
 * 
 * V√≠ d·ª•: Consumer<Animal> c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng nh∆∞ Consumer<Dog>
 * v√¨ Animal c√≥ th·ªÉ x·ª≠ l√Ω b·∫•t k·ª≥ Dog n√†o (Dog l√† con c·ªßa Animal).
 */

// Interface contravariant - ch·ªâ consume d·ªØ li·ªáu v√†o
interface Consumer<in T> {
    fun consume(item: T)
    // fun produce(): T // ‚ùå KH√îNG ƒë∆∞·ª£c ph√©p - vi ph·∫°m contravariance
}

// Implementation c·ª• th·ªÉ
class AnimalConsumer : Consumer<Animal> {
    private val consumedAnimals = mutableListOf<Animal>()

    override fun consume(item: Animal) {
        consumedAnimals.add(item)
        println("üçΩÔ∏è Consumed: $item - Sound: ${item.makeSound()}")
    }

    fun getConsumedCount() = consumedAnimals.size
    fun getConsumedAnimals() = consumedAnimals.toList()
}

class DogConsumer : Consumer<Dog> {
    private val consumedDogs = mutableListOf<Dog>()

    override fun consume(item: Dog) {
        consumedDogs.add(item)
        println("üêï Dog consumed: $item - ${item.bark()}")
    }

    fun getConsumedDogs() = consumedDogs.toList()
}

/**
 * =============================================================================
 * 4. INVARIANCE - KH√îNG C√ì VARIANCE
 * =============================================================================
 * 
 * Invariance kh√¥ng cho ph√©p thay th·∫ø ki·ªÉu.
 * Kh√¥ng s·ª≠ d·ª•ng 'in' hay 'out' tr∆∞·ªõc type parameter.
 * 
 * C√≥ th·ªÉ v·ª´a produce v·ª´a consume d·ªØ li·ªáu.
 */

// Interface invariant - c√≥ th·ªÉ v·ª´a produce v·ª´a consume
interface Storage<T> {
    fun store(item: T)      // consume
    fun retrieve(): T?      // produce
    fun isEmpty(): Boolean
}

class AnimalStorage<T : Animal> : Storage<T> {
    private val items = mutableListOf<T>()

    override fun store(item: T) {
        items.add(item)
        println("üì¶ Stored: $item")
    }

    override fun retrieve(): T? {
        return if (items.isNotEmpty()) {
            val item = items.removeAt(0)
            println("üì§ Retrieved: $item")
            item
        } else {
            println("üì≠ Storage is empty")
            null
        }
    }

    override fun isEmpty(): Boolean = items.isEmpty()

    fun size(): Int = items.size
}

/**
 * =============================================================================
 * 5. USE-SITE VARIANCE (PROJECTION)
 * =============================================================================
 * 
 * Khi s·ª≠ d·ª•ng generic type, ta c√≥ th·ªÉ ch·ªâ ƒë·ªãnh variance t·∫°i ƒëi·ªÉm s·ª≠ d·ª•ng
 * thay v√¨ t·∫°i ƒëi·ªÉm khai b√°o.
 */

// Generic class kh√¥ng c√≥ variance t·∫°i declaration-site
class Box<T>(private var item: T) {
    fun get(): T = item
    fun set(item: T) { this.item = item }
}

/**
 * =============================================================================
 * 6. REAL-WORLD USE CASES
 * =============================================================================
 */

/**
 * USE CASE 1: Repository Pattern v·ªõi Covariance
 * 
 * Trong repository pattern, ta th∆∞·ªùng ch·ªâ ƒë·ªçc d·ªØ li·ªáu ra,
 * n√™n covariance r·∫•t h·ªØu √≠ch.
 */
interface VarianceRepository<out T> {
    suspend fun findById(id: String): T?
    suspend fun findAll(): List<T>
    // suspend fun save(entity: T) // ‚ùå Kh√¥ng ƒë∆∞·ª£c ph√©p v·ªõi covariance
}

class VarianceUserRepository : VarianceRepository<VarianceUser> {
    private val users = mapOf(
        "1" to VarianceUser("1", "John Doe", "john@example.com"),
        "2" to VarianceUser("2", "Jane Smith", "jane@example.com")
    )

    override suspend fun findById(id: String): VarianceUser? = users[id]
    override suspend fun findAll(): List<VarianceUser> = users.values.toList()
}

data class VarianceUser(val id: String, val name: String, val email: String)
data class VarianceAdminUser(val id: String, val name: String, val email: String, val permissions: List<String>)

/**
 * USE CASE 2: Event Handler v·ªõi Contravariance
 * 
 * Event handler th∆∞·ªùng ch·ªâ nh·∫≠n event v√†o ƒë·ªÉ x·ª≠ l√Ω,
 * n√™n contravariance r·∫•t ph√π h·ª£p.
 */
interface VarianceEventHandler<in T> {
    fun handle(event: T)
}

// Base event classes
open class VarianceEvent(val timestamp: Long = System.currentTimeMillis())
class VarianceUserEvent(val userId: String, val action: String) : VarianceEvent()
class VarianceSystemEvent(val component: String, val message: String) : VarianceEvent()

class GeneralVarianceEventHandler : VarianceEventHandler<VarianceEvent> {
    override fun handle(event: VarianceEvent) {
        println("üéØ Handling general event at ${event.timestamp}")
    }
}

class UserVarianceEventHandler : VarianceEventHandler<VarianceUserEvent> {
    override fun handle(event: VarianceUserEvent) {
        println("üë§ Handling user event: User ${event.userId} performed ${event.action}")
    }
}

/**
 * USE CASE 3: Collection Operations
 * 
 * Kotlin collections s·ª≠ d·ª•ng variance r·∫•t hi·ªáu qu·∫£:
 * - List<out T>: Covariant v√¨ ch·ªâ ƒë·ªçc
 * - MutableList<T>: Invariant v√¨ v·ª´a ƒë·ªçc v·ª´a ghi
 */

/**
 * USE CASE 4: Function Types v·ªõi Variance
 * 
 * Function types trong Kotlin c√≥ variance t·ª± nhi√™n:
 * - Parameter types: Contravariant (in)
 * - Return type: Covariant (out)
 * 
 * (A) -> B t∆∞∆°ng ƒë∆∞∆°ng v·ªõi Function1<in A, out B>
 */

/**
 * =============================================================================
 * 7. L∆ØU √ù KHI S·ª¨ D·ª§NG
 * =============================================================================
 */

/**
 * L∆ØU √ù 1: PECS Rule (Producer Extends, Consumer Super)
 * 
 * - N·∫øu b·∫°n ch·ªâ ƒê·ªåC d·ªØ li·ªáu t·ª´ generic type ‚Üí s·ª≠ d·ª•ng COVARIANCE (out)
 * - N·∫øu b·∫°n ch·ªâ GHI d·ªØ li·ªáu v√†o generic type ‚Üí s·ª≠ d·ª•ng CONTRAVARIANCE (in)  
 * - N·∫øu b·∫°n v·ª´a ƒë·ªçc v·ª´a ghi ‚Üí s·ª≠ d·ª•ng INVARIANCE (kh√¥ng c√≥ in/out)
 */

/**
 * L∆ØU √ù 2: Star Projection (*)
 * 
 * Khi kh√¥ng bi·∫øt ch√≠nh x√°c ki·ªÉu generic, c√≥ th·ªÉ s·ª≠ d·ª•ng star projection
 */
fun processUnknownList(list: List<*>) {
    // Ch·ªâ c√≥ th·ªÉ ƒë·ªçc nh∆∞ Any?
    for (item in list) {
        println("Item: $item")
    }
}

/**
 * L∆ØU √ù 3: Type Erasure
 * 
 * Th√¥ng tin generic b·ªã x√≥a t·∫°i runtime, c·∫ßn c·∫©n th·∫≠n khi l√†m vi·ªác v·ªõi reflection
 */

/**
 * L∆ØU √ù 4: Bounded Type Parameters
 * 
 * C√≥ th·ªÉ k·∫øt h·ª£p variance v·ªõi bounded types
 */
interface BoundedProducer<out T : Animal> {
    fun produce(): T
}

interface BoundedConsumer<in T : Animal> {
    fun consume(item: T)
}

/**
 * =============================================================================
 * 8. DEMO FUNCTIONS
 * =============================================================================
 */

fun demonstrateCovariance() {
    println("\nüîÑ === COVARIANCE DEMO ===")

    val dogProducer: Producer<Dog> = DogProducer()
    // ‚úÖ Covariance cho ph√©p g√°n Producer<Dog> cho Producer<Animal>
    val animalProducer: Producer<Animal> = dogProducer

    println("From dog producer (as animal producer):")
    repeat(3) {
        val animal = animalProducer.produce()
        println("  Produced: $animal - Sound: ${animal.makeSound()}")
    }

    // Gi·∫£i th√≠ch: V√¨ Dog l√† con c·ªßa Animal, v√† Producer ch·ªâ produce ra d·ªØ li·ªáu,
    // n√™n ta c√≥ th·ªÉ an to√†n s·ª≠ d·ª•ng Producer<Dog> nh∆∞ Producer<Animal>
}

fun demonstrateContravariance() {
    println("\nüîÑ === CONTRAVARIANCE DEMO ===")

    val animalConsumer: Consumer<Animal> = AnimalConsumer()
    // ‚úÖ Contravariance cho ph√©p g√°n Consumer<Animal> cho Consumer<Dog>
    val dogConsumer: Consumer<Dog> = animalConsumer

    println("Using animal consumer as dog consumer:")
    dogConsumer.consume(Dog("Buddy"))
    dogConsumer.consume(Dog("Max"))

    // Gi·∫£i th√≠ch: V√¨ Animal c√≥ th·ªÉ x·ª≠ l√Ω b·∫•t k·ª≥ Dog n√†o (Dog l√† con c·ªßa Animal),
    // n√™n ta c√≥ th·ªÉ an to√†n s·ª≠ d·ª•ng Consumer<Animal> nh∆∞ Consumer<Dog>
}

fun demonstrateInvariance() {
    println("\nüîÑ === INVARIANCE DEMO ===")

    val dogStorage = AnimalStorage<Dog>()
    // ‚ùå Kh√¥ng th·ªÉ g√°n cho Storage<Animal> v√¨ invariant
    // val animalStorage: Storage<Animal> = dogStorage // Compile error

    dogStorage.store(Dog("Rex"))
    dogStorage.store(Dog("Buddy"))

    println("Storage size: ${dogStorage.size()}")

    val retrieved = dogStorage.retrieve()
    retrieved?.let { println("Retrieved and can call dog-specific method: ${it.bark()}") }
}

fun demonstrateUseSiteVariance() {
    println("\nüîÑ === USE-SITE VARIANCE DEMO ===")

    val dogBox = Box(Dog("Buddy"))
    val catBox = Box(Cat("Whiskers"))

    // Use-site variance: ch·ªâ ƒë·ªãnh variance t·∫°i ƒëi·ªÉm s·ª≠ d·ª•ng
    val boxes: List<Box<out Animal>> = listOf(dogBox, catBox)

    println("Reading from boxes with out projection:")
    boxes.forEach { box ->
        val animal = box.get() // Ch·ªâ c√≥ th·ªÉ ƒë·ªçc nh∆∞ Animal
        println("  Animal: $animal - Sound: ${animal.makeSound()}")
        // box.set(Dog("New Dog")) // ‚ùå Kh√¥ng th·ªÉ ghi v·ªõi out projection
    }

    // In projection example
    fun feedAnimals(boxes: List<Box<in Animal>>) {
        boxes.forEach { box ->
            box.set(Dog("Fed Dog")) // C√≥ th·ªÉ ghi Animal ho·∫∑c subtype
            // val animal = box.get() // ‚ùå Kh√¥ng th·ªÉ ƒë·ªçc v·ªõi in projection (tr·∫£ v·ªÅ Any?)
        }
    }
}

fun demonstrateRealWorldUseCases() {
    println("\nüîÑ === REAL-WORLD USE CASES DEMO ===")

    // Repository pattern
    println("\nüìö Repository Pattern:")
    val userRepo: VarianceRepository<VarianceUser> = VarianceUserRepository()
    // C√≥ th·ªÉ s·ª≠ d·ª•ng nh∆∞ VarianceRepository<Any> n·∫øu c·∫ßn

    // Event handling
    println("\nüéØ Event Handling:")
    val generalHandler: VarianceEventHandler<VarianceEvent> = GeneralVarianceEventHandler()
    val userHandler: VarianceEventHandler<VarianceUserEvent> = UserVarianceEventHandler()

    // Contravariance: c√≥ th·ªÉ s·ª≠ d·ª•ng general handler cho specific events
    val specificUserHandler: VarianceEventHandler<VarianceUserEvent> = generalHandler

    specificUserHandler.handle(VarianceUserEvent("123", "login"))
    userHandler.handle(VarianceUserEvent("456", "logout"))

    // Collection variance
    println("\nüìã Collection Variance:")
    val dogs: List<Dog> = listOf(Dog("Rex"), Dog("Buddy"))
    val animals: List<Animal> = dogs // ‚úÖ Covariance

    animals.forEach { animal ->
        println("  Animal in list: $animal")
    }
}

fun demonstrateCommonPitfalls() {
    println("\nüîÑ === COMMON PITFALLS ===")

    println("\n‚ö†Ô∏è Pitfall 1: Trying to modify covariant collections")
    val dogs = mutableListOf(Dog("Rex"))
    // val animals: MutableList<Animal> = dogs // ‚ùå Compile error - MutableList is invariant
    // animals.add(Cat("Whiskers")) // N·∫øu ƒë∆∞·ª£c ph√©p, s·∫Ω th√™m Cat v√†o list Dog!
    println("  MutableList is invariant - cannot assign MutableList<Dog> to MutableList<Animal>")

    println("\n‚ö†Ô∏è Pitfall 2: Star projection limitations")
    val unknownList: List<*> = listOf("Hello", "World")
    processUnknownList(unknownList)
    // val item: String = unknownList[0] // ‚ùå Compile error - ch·ªâ c√≥ th·ªÉ ƒë·ªçc nh∆∞ Any?

    println("\n‚ö†Ô∏è Pitfall 3: Variance v√† null safety")
    val nullableProducer: Producer<String?> = object : Producer<String?> {
        override fun produce(): String? = null
    }
    // val nonNullProducer: Producer<String> = nullableProducer // ‚ùå Compile error
    println("  Cannot assign Producer<String?> to Producer<String> due to null safety")
}

/**
 * =============================================================================
 * 9. MAIN FUNCTION - CH·∫†Y T·∫§T C·∫¢ DEMO
 * =============================================================================
 */
fun runGenericVarianceExamples() {
    println("üöÄ KOTLIN GENERICS VARIANCE - IN V√Ä OUT EXAMPLES")
    println("=" * 60)

    demonstrateCovariance()
    demonstrateContravariance() 
    demonstrateInvariance()
    demonstrateUseSiteVariance()
    demonstrateRealWorldUseCases()
    demonstrateCommonPitfalls()

    println("\n" + "=" * 60)
    println("‚úÖ Ho√†n th√†nh t·∫•t c·∫£ v√≠ d·ª• v·ªÅ Kotlin Generics Variance!")
    println("\nüìù T√ìM T·∫ÆT:")
    println("‚Ä¢ OUT (Covariance): Ch·ªâ ƒë·ªçc d·ªØ li·ªáu - Producer")
    println("‚Ä¢ IN (Contravariance): Ch·ªâ ghi d·ªØ li·ªáu - Consumer") 
    println("‚Ä¢ Kh√¥ng c√≥ IN/OUT (Invariance): V·ª´a ƒë·ªçc v·ª´a ghi")
    println("‚Ä¢ PECS Rule: Producer Extends, Consumer Super")
    println("‚Ä¢ Use-site variance: Ch·ªâ ƒë·ªãnh variance t·∫°i ƒëi·ªÉm s·ª≠ d·ª•ng")
}

// Extension function ƒë·ªÉ l·∫∑p string
private operator fun String.times(n: Int): String = this.repeat(n)
